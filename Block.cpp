/******************************************************************************
 *  ファイル名
 *      Block.cpp
 *  ブロック名
 *      -
 *  概要
 *      ブロックI/F基底クラス定義
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "typedef.h"
#include "macro.h"
#include "Block.h"
#include "Bus.h"

/*============================================================================*
 * ローカル参照
 *============================================================================*/
using namespace Simulator;

/*============================================================================*
 *  関数名
 *      UI初期化
 *  概要
 *      コンストラクタ・デストラクタ
 *  パラメタ説明
 *      なし
 *  戻り値
 *      0           : 正常終了、other : 異常終了
 *============================================================================*/
Block::Block()
{
}

Block::Block(TINT id)
{
	m_ID = id;
}

Block::~Block()
{
}


/*============================================================================*
 *  関数名
 *      バス接続
 *  概要
 *      上位バス接続を行う
 *  パラメタ説明
 *      pBus		: バスオブジェクトポインタ
 *  戻り値
 *      なし           : 正常終了、other : 異常終了
 *============================================================================*/
TVOID Block::SetParentBus(Bus* pBus)
{
	m_ParentBus = pBus;
}

/*============================================================================*
 *  関数名
 *      リセット
 *  概要
 *      ブロックリセット
 *  パラメタ説明
 *      なし
 *  戻り値
 *      0           : 正常終了、other : 異常終了
 *============================================================================*/
TINT Block::Reset(TVOID)
{
	/* 必要に応じて派生クラスで初期化処理を記述 */
	return D_ERR_OK;
}


/*============================================================================*
 *  関数名
 *      ブロックプロパティ
 *  概要
 *      ブロックに関する情報を返す
 *  パラメタ説明
 *      なし
 *  戻り値
 *      0           : 正常終了、other : 異常終了
 *============================================================================*/
TINT Block::Status(TVOID)
{
	return m_Busy;
}


/*============================================================================*
 *  関数名
 *      ブロック機能実行
 *  概要
 *      ブロック機能に関する実装
 *  パラメタ説明
 *      cmd			: コマンドID
 *		addr		: アドレス
 *		data		: データ（Verilog形式のコマンド仕様に依存します）
 *  戻り値
 *      0           : 正常終了、other : 異常終了
 *============================================================================*/
TINT Block::Exec()
{
	/* 必要に応じて派生クラスで初期化処理を記述 */
	return D_EXEC_HOLD;		// エンジン実行処理終了の場合
//	return D_EXEC_OK;		// 継続実行中の場合
}

TINT Block::Exec(int module_id)
{
	/* 必要に応じて派生クラスで初期化処理を記述 */
	return D_EXEC_HOLD;		// エンジン実行処理終了の場合
//	return D_EXEC_OK;		// 継続実行中の場合
}


/*============================================================================*
 *  関数名
 *      割込み受付け
 *  概要
 *      ブロック機能に対する割込み
 *  パラメタ説明
 *      src_module_id : 割込み元モジュールID(バスから渡される)
 *      param         : パラメータ
 *  戻り値
 *      0           : 正常終了、other : 異常終了
 *============================================================================*/
TINT Block::Interrupt(int src_module_id, TW32U &param)
{
	/* 必要に応じて派生クラスで初期化処理を記述 */
	return D_EXEC_OK;		// 継続実行中の場合
}

/*============================================================================*
 *  関数名
 *      アクセスI/F
 *  概要
 *      ブロック内リソースとのGet&Set-I/F定義
 *  パラメタ説明
 *      MemID		: メモリID
 *      addr		: アクセスアドレス
 *      value		: 書き込み値(Set時)
 *  戻り値
 *      0           : 正常終了、other : 異常終了
 *============================================================================*/
/* 派生クラス内で処理を定義すること */
